<?php

namespace App;

// enable use of namespaces
require 'vendor/autoload.php';

use App\SQLiteWrite as SQLiteWrite;
use App\SQLiteRead as SQLiteRead;
use \DOMDocument as DOMDocument;

/**
 * Contains methods related to filtering out unwanted data or manipulating data during scan
 */
class FilterManipulateData {

  /**
  * Takes a given URL and, if relative, converts it to an absolute URL, then returns it as a string
  * @param string $url - to be checked and / or converted
  * @return string $url - converted or checked
  */
  public function relativeToAbsoluteLink($url) {
    // if relative link then add protocol and domain (relative defined as none http and beginning with a slash)
    if (substr($url, 0, 4) != 'http' && substr($url, 0, 1) == '/') {
      $url = 'https://www.musement.com'.$url;
    }
    return $url;
  }

  /**
  * Takes a given URL and checks to see if the path matches the string 'www.musement.com', with the given locale. Returns a 1 if true, or a 0 if false.
  * @param string $url - the url to be checked
  * @param string $locale - the locale to be checked
  * @return int $include - really a boolean, 1 or 0, depending on whether the url is designated as 'valid'.
  */
  public function checkURLPath($url, $locale) {
    // $include flag - set whether we include the link in the sitemap
    $include = 1;
    // Only evaluate musement.com links
    if (parse_url($url, PHP_URL_HOST).substr(parse_url($url, PHP_URL_PATH), 0, 4) != 'www.musement.com/'.$locale.'/') {
      $include = 0;
    }

    return $include;
  }

  /**
  * Takes a given URL and checks to see if the URL matches one of the URLs given in the site's robots.txt file.
  * These "robot urls" are stored in the db. Returns a 1 or 0, depending on if the URL matches a robot URL, or not.
  * @param string $url - the url to be checked
  * @return int $include - really a boolean, 1 or 0, depending on whether the url is designated as 'valid'.
  */
  public function checkRobotPages($url) {
    // $include flag - set whether we include the link in the sitemap
    $include = 1;
    // find the path of the url being checked
    $path = parse_url($url, PHP_URL_PATH);
    // instantiate SQLiteRead class
    $sqlread = new SQLiteRead();
    // fetch the robot array pages. Stored in db so would not have to retrieve using curl each time
    $robarr = $sqlread->retrieveRobotPages();

    // does anything in the robots array match the end of the url?
    foreach ($robarr as $roburl) {
      // if the end of the url path equals the robot url
      if (substr($path, 0-strlen($roburl['url'])) == $roburl['url']) {
        $include = 0;
      }
    }

    return $include;
  }

  /**
  * Takes the web page information, as gathered via the curl_getinfo command and checks to see if the URL returns an HTTP 200 code.
  * If not, the page is designated as 'invalid'. Returns a 1 or 0, depending on if there is an HTTP error, or not.
  * @param array $pageinfo - page information gathered via the curl_getinfo command
  * @return int $validurl - really a boolean, 1 or 0, depending on whether the url is designated as 'valid'.
  */
  public function isHTTPError($pageinfo) {
    // instantiate SQLiteWrite class
    $sqlwrite = new SQLiteWrite();
    // $validurl will determine if we carry on processing url
    $validurl = 1;

    // Only evaluate links which are valid http codes (filter after scanning & before writing)
    if ($pageinfo['http_code'] != 200) {
      // Set the include flag to 0 in the links table
      $sqlwrite->updateLink($pageinfo['url'], 0);
      // set $validurl to 0 so we can stop processing this url
      $validurl = 0;
    }

    return $validurl;
  }

  /**
  * Takes a given URL, and strips the path information down to include only the Scheme, Host, locale and the first "element" of the path,
  * then returns the result as a string. This allows us to see what city the URL relates to.
  * @param string $url - the URL to be converted
  * @return string $cityurl - the URL converted into it's "city" component only
  */
  public function buildCityURL($url) {
    // remove everything after the second element in the url path to see if it is a city page or the child of city page
    $path = parse_url($url, PHP_URL_PATH);
    $city = strstr(substr($path, 4), '/', true);
    // rebuild the url using the schema, the host, and the parsed path. $cityurl will be in the form of https://www.musement.com/<locale>/<city>/
    $cityurl = parse_url($url, PHP_URL_SCHEME).'://'.parse_url($url, PHP_URL_HOST).substr($path, 0,  4).$city.'/';

    return $cityurl;
  }

  /**
  * Takes a given URL, and checks to see if it matches a URL contained in the events database table. This designates it as a "top 20 event".
  * Returns a 1 or 0, depending on if it is found or not.
  * @param string $url - the URL to be checked
  * @return int $include - really a boolean, 1 or 0, depending on whether the url is found in the events table.
  */
  public function isTop20Event($url) {
    // $include flag - set whether we include the link in the sitemap
    $include = 1;
    // instantiate SQLiteRead class
    $sqlread = new SQLiteRead();
    // retrieve top 20 event list from API
    $eventdata = $sqlread->retrieveEvents();

    // is the city one of the top 20 cities from the API?
    if (!array_search($url, array_column($eventdata, 'url'))) {
      // set $validurl to 0
      $include = 0;
    }
    return $include;
  }

  /**
  * Takes a given URL, and based on the format of the URL, decides what type of page it is. Returns the page or 'view' type as a string.
  * @param string $url - the URL to be analysed
  * @return string $viewtype - the type of page it is (other, event, city, unknown).
  */
  public function findPageTypeFromURL($url) {
    $viewtype = '';
    // Set view type for newly added link based on url format
    // extract path for ease of use
    $path = parse_url($url, PHP_URL_PATH);
    // if last 2 characters before the last slash are one of '-p', '-v', '-t', '-l', '-c'
    if (in_array(substr($path, -3, 2), array('-p', '-v', '-t', '-l', '-c'))) {
      // it's an "other" type of page
      $viewtype = 'other';
    }
    // is it a 'giftbox' type url - added due to testing of XML
    if (strpos($path, 'giftbox')) {
      // it's an "other" type of page
      $viewtype = 'other';
    }
    // else if path contains 4 slashes and the last character before the last slash is numeric
    elseif (substr_count($path, '/') == 4 && is_numeric(substr($path, -2, 1))) {
      // It's an activity / event
      $viewtype = 'event';
    }
    // else if there are 3 slashes in the path and no dashes
    elseif (substr_count($path, '/') == 3 && !substr_count($path, '-')) {
      // needs to be validated against city list - retrieve top 20 cities
      $cityurls = array_column((new SQLiteRead())->retrieveCities(), 'url');
      // Added check to see if short url is in the top 20 cities,  if not, set as other link. Fix issue found in testing
      if (in_array($url, $cityurls)) {
        // It's a city
        $viewtype = 'city';
      } else {
        // it's an other
        $viewtype = 'other';
      }
    } else {
      $viewtype = 'unknown';
    }

    return $viewtype;
  }

  /**
  * Takes a given URL, and an array of cities which have been included on the "rejects" list and stored in the database,
  * then uses the buildCityURL method to find the city which the url is related to and checks to see if the city is on the rejects list.
  * Added test to see if city_rejects array is populated, and to use the top 20 cities, if not, as found this was not controlling content in lite scan
  * Returns a 1 or a 0, depending on if url is found.
  * @param string $url - the URL to be checked
  * @param array $cityrejects - an array containing all the city urls which have been previously identified as "non top 20"
  * @return int $include - really a boolean, 1 or 0, depending on whether the "city" part of the url is found in the $cityrejects array.
  */
  public function isCityReject($url, $cityrejects) {
    // $include flag - set whether we include the link in the sitemap
    $include = 1;
    // find the city this url relates to
    $cityurl = $this->buildCityURL($url);
    // if city_rejects table is populated (standard scan) - Added to fix issue with lite scan found during testing
    // if (isset($cityrejects)) {
    //   // check to see if the $cityurl is in the $cityrejects list, set to not include, if so
    //   if (array_search($cityurl, array_column($cityrejects, 'url'))) {
    //     $include = 0;
    //   }
    // // else use the top 20 city list to decide if the url should be inlcuded - - Added to fix issue with lite scan found during testing
    // } else {
      // if there are 4 slashes in the path
      if (substr_count(parse_url($url, PHP_URL_PATH), '/') == 4) {
        $topcities = array_column((new SQLiteRead())->retrieveCities(), 'url');
        if (!in_array($cityurl, $topcities)) {
          $include = 0;
        }
      }
    // }

    return $include;
  }

}

